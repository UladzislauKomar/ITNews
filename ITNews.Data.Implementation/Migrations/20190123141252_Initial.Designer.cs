// <auto-generated />
using System;
using ITNews.Data.Implementation.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITNews.Data.Implementation.Migrations
{
    [DbContext(typeof(ITNewsDbContext))]
    [Migration("20190123141252_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.CommentEntity", b =>
                {
                    b.Property<string>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created");

                    b.Property<string>("NewsId");

                    b.Property<string>("UserRoleId");

                    b.HasKey("CommentId");

                    b.HasIndex("NewsId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.CommentLikeEntity", b =>
                {
                    b.Property<string>("CommentLikeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentId");

                    b.Property<string>("UserRoleId");

                    b.HasKey("CommentLikeId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.NewsEntity", b =>
                {
                    b.Property<string>("NewsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("SectionId");

                    b.Property<string>("Title");

                    b.Property<string>("UserRoleId");

                    b.HasKey("NewsId");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.NewsRatingEntity", b =>
                {
                    b.Property<string>("NewsRatingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NewsId");

                    b.Property<float>("Rating");

                    b.Property<string>("UserRoleId");

                    b.HasKey("NewsRatingId");

                    b.HasIndex("NewsId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("NewsRatings");
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.NewsTagEntity", b =>
                {
                    b.Property<string>("NewsId");

                    b.Property<string>("TagId");

                    b.Property<string>("NewsTagId");

                    b.HasKey("NewsId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("NewsTags");
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.SectionEntity", b =>
                {
                    b.Property<string>("SectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.TagEntity", b =>
                {
                    b.Property<string>("TagId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.UserRoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("Birthdate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserRoleName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserRoleName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserRoleName")
                        .IsUnique()
                        .HasName("UserRoleNameIndex")
                        .HasFilter("[NormalizedUserRoleName] IS NOT NULL");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserRoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("AspNetUserRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRoleLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserRoleId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserRoleId");

                    b.ToTable("AspNetUserRoleLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRoleRole<string>", b =>
                {
                    b.Property<string>("UserRoleId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserRoleId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoleRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRoleToken<string>", b =>
                {
                    b.Property<string>("UserRoleId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserRoleId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserRoleTokens");
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.CommentEntity", b =>
                {
                    b.HasOne("ITNews.Data.Contracts.Entities.NewsEntity", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId");

                    b.HasOne("ITNews.Data.Contracts.Entities.UserRoleEntity", "UserRole")
                        .WithMany("Comments")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.CommentLikeEntity", b =>
                {
                    b.HasOne("ITNews.Data.Contracts.Entities.CommentEntity", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ITNews.Data.Contracts.Entities.UserRoleEntity", "UserRole")
                        .WithMany("Likes")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.NewsEntity", b =>
                {
                    b.HasOne("ITNews.Data.Contracts.Entities.SectionEntity", "Section")
                        .WithMany("News")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ITNews.Data.Contracts.Entities.UserRoleEntity", "UserRole")
                        .WithMany("News")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.NewsRatingEntity", b =>
                {
                    b.HasOne("ITNews.Data.Contracts.Entities.NewsEntity", "News")
                        .WithMany("Ratings")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ITNews.Data.Contracts.Entities.UserRoleEntity", "UserRole")
                        .WithMany("Ratings")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ITNews.Data.Contracts.Entities.NewsTagEntity", b =>
                {
                    b.HasOne("ITNews.Data.Contracts.Entities.TagEntity", "Tag")
                        .WithMany("News")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ITNews.Data.Contracts.Entities.NewsEntity", "News")
                        .WithMany("Tags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRoleClaim<string>", b =>
                {
                    b.HasOne("ITNews.Data.Contracts.Entities.UserRoleEntity")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRoleLogin<string>", b =>
                {
                    b.HasOne("ITNews.Data.Contracts.Entities.UserRoleEntity")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRoleRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ITNews.Data.Contracts.Entities.UserRoleEntity")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRoleToken<string>", b =>
                {
                    b.HasOne("ITNews.Data.Contracts.Entities.UserRoleEntity")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
